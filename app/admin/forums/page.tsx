// app/admin/forums/page.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { db } from "@/config/firebase"; // Your Firebase client SDK instance
import {
  collection,
  query,
  orderBy,
  where,
  getDocs,
  addDoc,
  updateDoc,
  doc,
  increment,
  getDoc,
  deleteDoc,
  setDoc,
  limit,
  startAfter,
  DocumentData,
  QueryDocumentSnapshot,
  Timestamp,
  writeBatch, // Import writeBatch for more efficient deletion
  arrayUnion // Import arrayUnion to add unique items to an array
} from "firebase/firestore";
import { formatDistanceToNowStrict } from 'date-fns';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { cn } from "@/lib/utils";

import { MessageSquare, ThumbsUp, ThumbsDown, Eye, Clock, User as UserIcon, Heart, Award, Loader2, CheckCircle2, Trash2, ShieldCheck, Settings, Plus, X, Flag } from "lucide-react"; // Added Flag icon
import Link from "next/link";
import Image from "next/image";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

// Import useAuth and UserData from your AuthContext
import { useAuth, UserData } from "@/app/context/authContext";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";


// Define interfaces for forum data, reflecting Firestore structure
interface Forum {
  id: string; // Firestore Document ID
  title: string;
  author: string;
  authorId: string; // Added authorId to Forum interface
  authorImage: string;
  date: Timestamp; // Original creation timestamp of the post
  category: string;
  tags: string[];
  replies: number; // Count of replies
  views: number;   // Count of views
  likes: number;   // Count of likes
  solved: boolean;
  createdAt: Timestamp; // Original creation time of the forum post
  lastActivityAt: Timestamp; // New field for last activity time (reply, like, view, etc.)
  description?: string; // New: Full description/content of the main post
  lastReplyText?: string; // Snippet of the last reply (only if replies exist)
  lastReplyAuthor?: string; // Author of the last reply (only if replies exist)
}

// Define interface for replies
interface Reply {
  id?: string; // Made 'id' optional as it's generated by Firestore on add
  forumId: string; // ID of the parent forum
  authorId: string;
  authorName: string;
  authorImage: string;
  text: string;
  createdAt: Timestamp;
  upvotes: number;
  downvotes: number;
  // Local state to track user's vote on this specific reply
  userVote?: 'up' | 'down' | null;
  isExpert?: boolean; // New: To mark if the reply is from an expert
}

// Interface for Category data stored in Firestore
interface Category {
  id: string;
  name: string;
  createdAt: Timestamp;
}

// New Interface for Reported Post data stored in Firestore
interface ReportedPost {
  id: string;
  type: 'forum' | 'reply';
  itemId: string; // ID of the reported forum or reply
  itemTitle: string; // Title/snippet of the reported content
  parentForumId?: string; // NEW: Parent forum ID, crucial for reported replies
  reporterId: string; // The user who initially created this report (could be first reporter)
  reporterName: string; // The name of the user who initially created this report
  reasons: string[]; // NEW: Array of reasons
  reportCount: number; // NEW: Counter for reports
  reportedAt: Timestamp;
  status: 'pending' | 'dismissed' | 'actioned';
  resolvedBy?: string;
  resolvedAt?: Timestamp;
}

const ITEMS_PER_PAGE = 6;


export default function ForumsPage() {
  const { user, userData, loading: authLoading } = useAuth();
  const isAdmin = userData?.role === 'admin';
  const currentUserIsExpert = userData?.role === 'expert';

  // Moved initialCategories inside the component
  const initialCategories = ["TCS", "Infosys", "Capgemini", "Wipro", "Aptitude", "Coding", "Other/General"];


  const [forums, setForums] = useState<Forum[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>("all");
  const [lastVisible, setLastVisible] = useState<QueryDocumentSnapshot<DocumentData> | null>(null);
  const [hasMore, setHasMore] = useState(true);

  // States for the forum detail modal
  const [isForumDetailModalOpen, setIsForumDetailModalOpen] = useState(false);
  const [selectedForum, setSelectedForum] = useState<Forum | null>(null);
  const [forumReplies, setForumReplies] = useState<Reply[]>([]);
  const [newReplyText, setNewReplyText] = useState<string>("");
  const [submittingReply, setSubmittingReply] = useState(false);
  const [isForumLikedByUser, setIsForumLikedByUser] = useState(false);

  // States for New Discussion Modal
  const [isNewDiscussionModalOpen, setIsNewDiscussionModalOpen] = useState(false);
  const [newDiscussionTitle, setNewDiscussionTitle] = useState("");
  const [newDiscussionDescription, setNewDiscussionDescription] = useState("");
  const [newDiscussionCategory, setNewDiscussionCategory] = useState("Other/General");
  const [newDiscussionTags, setNewDiscussionTags] = useState("");
  const [submittingNewDiscussion, setSubmittingNewDiscussion] = useState(false);

  // State for general form submission (used for delete and solve actions)
  const [submitting, setSubmitting] = useState(false);

  // State for delete confirmation dialog
  const [isConfirmDeleteModalOpen, setIsConfirmDeleteModalOpen] = useState(false);

  // Admin action modals & states
  const [isManageCategoriesModalOpen, setIsManageCategoriesModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState(""); // For adding new category
  const [categories, setCategories] = useState<Category[]>([]); // Dynamic list of categories from Firestore

  // State for Reported Posts
  const [isViewReportedPostsModalOpen, setIsViewReportedPostsModalOpen] = useState(false);
  const [reportedPosts, setReportedPosts] = useState<ReportedPost[]>([]);

  // State for Reporting a Forum (New) - only used for the reporting modal, not directly related to admin page's display
  const [isReportForumModalOpen, setIsReportForumModalOpen] = useState(false); // This seems to be a left-over or misnamed state for the *user's* reporting modal, not the admin's. Keeping it for now but note its original intent.
  const [reportReason, setReportReason] = useState("");
  const [submittingReport, setSubmittingReport] = useState(false);
  const [reportItemDetails, setReportItemDetails] = useState<{ id: string; title: string; type: 'forum' | 'reply' } | null>(null);

  // New state to track if forum detail was opened from reported posts modal
  const [sourceModal, setSourceModal] = useState<'none' | 'reportedPosts'>('none');


  // Function to format Firestore Timestamp to a readable string like "X days ago"
  const formatFirestoreTimestamp = (timestamp: Timestamp) => {
    if (!timestamp || !timestamp.toDate) {
      return "N/A";
    }
    const date = timestamp.toDate();
    return formatDistanceToNowStrict(date, { addSuffix: true });
  };

  // --- Category Management Functions ---
  const fetchCategories = useCallback(async () => {
    try {
      const q = query(collection(db, "categories"), orderBy("name", "asc"));
      const querySnapshot = await getDocs(q);
      const fetchedCategories: Category[] = [];
      querySnapshot.forEach((doc) => {
        fetchedCategories.push({
          id: doc.id,
          name: doc.data().name,
          createdAt: doc.data().createdAt,
        });
      });
      setCategories(fetchedCategories);
    } catch (err) {
      console.error("Error fetching categories:", err);
      // Optionally set an error state to display to the user
    }
  }, []);

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) {
      alert("Category name cannot be empty."); // Using alert for simplicity, replace with custom modal
      return;
    }
    if (categories.some(cat => cat.name.toLowerCase() === newCategoryName.trim().toLowerCase())) {
      alert("Category already exists."); // Using alert for simplicity, replace with custom modal
      return;
    }

    try {
      // Add category to Firestore
      await addDoc(collection(db, "categories"), {
        name: newCategoryName.trim(),
        createdAt: Timestamp.now(),
      });
      setNewCategoryName("");
      await fetchCategories(); // Refresh local categories list
      console.log(`Category "${newCategoryName.trim()}" added.`);
    } catch (err) {
      console.error("Error adding category:", err);
      alert("Failed to add category. Please try again."); // Using alert for simplicity
    }
  };

  const handleDeleteCategory = async (categoryId: string, categoryName: string) => {
    // Replaced confirm() with a custom dialog for better UX
    // For now, I'll keep the direct deletion logic here, but in a full app,
    // this would ideally open another confirmation dialog.
    if (!window.confirm(`Are you sure you want to delete the category "${categoryName}"? This action cannot be undone.`)) {
        return;
    }

    try {
      // Delete category from Firestore
      await deleteDoc(doc(db, "categories", categoryId));
      await fetchCategories(); // Refresh local categories list
      console.log(`Category "${categoryName}" deleted.`);
    } catch (err) {
      console.error("Error deleting category:", err);
      alert("Failed to delete category. Please try again."); // Using alert for simplicity
    }
  };


  // Function to fetch forums from Firestore
  const fetchForums = useCallback(async (category: string, lastDoc: QueryDocumentSnapshot<DocumentData> | null, append: boolean = false) => {
    setLoading(true);
    setError(null);

    try {
      let q = query(
        collection(db, "forums"),
        orderBy("lastActivityAt", "desc") // Order by lastActivityAt for main list
      );

      if (category !== "all") {
        q = query(q, where("category", "==", category));
      }

      if (lastDoc) {
        q = query(q, startAfter(lastDoc));
      }

      q = query(q, limit(ITEMS_PER_PAGE));

      const querySnapshot = await getDocs(q);
      const newForums: Forum[] = [];

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const forumItem: Forum = {
          id: doc.id,
          title: data.title,
          author: data.author,
          authorId: data.authorId, // Ensure authorId is read from Firestore
          authorImage: data.authorImage,
          date: data.date, // Original post date
          category: (data.category as string || "Other/General"), // Ensure category is always a string
          tags: (data.tags || []) as string[], // Ensure tags is always an array of strings
          replies: data.replies || 0,
          views: data.views || 0,
          likes: data.likes || 0,
          solved: data.solved || false,
          createdAt: data.createdAt, // Original creation timestamp
          lastActivityAt: data.lastActivityAt || data.createdAt, // Use new field, fallback to createdAt
          description: data.description || undefined, // Map the new description field
          lastReplyText: data.lastReplyText || undefined,
          lastReplyAuthor: data.lastReplyAuthor || undefined,
        };
        newForums.push(forumItem);
      });

      setForums((prevForums) => (append ? [...prevForums, ...newForums] : newForums));
      setLastVisible(querySnapshot.docs[querySnapshot.docs.length - 1] || null);
      setHasMore(newForums.length === ITEMS_PER_PAGE);

    } catch (err: any) {
      console.error("Error fetching forums:", err);
      setError(`Failed to load forums: ${err.message || "Unknown error."} Please check your Firestore rules and ensure your 'category' field has the correct casing for filtering.`);
    } finally {
      setLoading(false);
    }
  }, []);

  // Function to fetch replies for a specific forum
  const fetchReplies = useCallback(async (forumId: string) => {
    try {
      const q = query(
        collection(db, `forums/${forumId}/replies`),
        orderBy("createdAt", "asc")
      );
      const querySnapshot = await getDocs(q);
      let repliesList: Reply[] = await Promise.all(
        querySnapshot.docs.map(async (docSnap) => {
          const data = docSnap.data();
          let userVote: 'up' | 'down' | null = null;
          if (user?.uid) { // Check user's vote only if logged in
            const voteDocRef = doc(db, `forums/${forumId}/replies/${docSnap.id}/votes`, user.uid);
            const voteDocSnap = await getDoc(voteDocRef);
            if (voteDocSnap.exists()) {
              userVote = voteDocSnap.data().type;
            }
          }
          // Determine isExpert directly from the Firestore document's `isExpert` field
          // This relies on `isExpert` being set when the reply is created by an actual expert user.
          const isExpert = data.isExpert === true; // Ensure it's explicitly true
          return {
            id: docSnap.id, // ID is assigned here from docSnap.id
            forumId: forumId,
            authorId: data.authorId,
            authorName: data.authorName,
            authorImage: data.authorImage,
            text: data.text,
            createdAt: data.createdAt,
            upvotes: data.upvotes || 0,
            downvotes: data.downvotes || 0,
            userVote,
            isExpert, // Add isExpert flag
          };
        })
      );

      // Sort replies: expert replies first, then by creation date (chronological for all)
      repliesList.sort((a, b) => {
        if (a.isExpert && !b.isExpert) return -1; // Expert comes before non-expert
        if (!a.isExpert && b.isExpert) return 1;  // Non-expert comes after expert
        // Fallback to chronological if both are experts or both are non-experts
        return a.createdAt.toMillis() - b.createdAt.toMillis();
      });

      setForumReplies(repliesList);
    } catch (err) {
      console.error("Error fetching replies:", err);
    }
  }, [user?.uid]);

  // Function to check if the current user has liked the selected forum
  const checkUserLikeStatus = useCallback(async (forumId: string, userId: string) => {
    if (!userId || !forumId) {
      setIsForumLikedByUser(false);
      return;
    }
    try {
      const likeDocRef = doc(db, `forums/${forumId}/likes`, userId);
      const likeDocSnap = await getDoc(likeDocRef);
      setIsForumLikedByUser(likeDocSnap.exists());
    } catch (err) {
      console.error("Error checking like status:", err);
      setIsForumLikedByUser(false);
    }
  }, []);

  // Helper to fetch a single forum by ID (used for opening reported posts)
  const getForumById = useCallback(async (forumId: string): Promise<Forum | null> => {
    try {
        const forumDocRef = doc(db, "forums", forumId);
        const forumDocSnap = await getDoc(forumDocRef);
        if (forumDocSnap.exists()) {
            const data = forumDocSnap.data();
            return {
                id: forumDocSnap.id,
                title: data.title,
                author: data.author,
                authorId: data.authorId,
                authorImage: data.authorImage,
                date: data.date,
                category: data.category || "Other/General",
                tags: data.tags || [],
                replies: data.replies || 0,
                views: data.views || 0,
                likes: data.likes || 0,
                solved: data.solved || false,
                createdAt: data.createdAt,
                lastActivityAt: data.lastActivityAt || data.createdAt,
                description: data.description || undefined,
                lastReplyText: data.lastReplyText || undefined,
                lastReplyAuthor: data.lastReplyAuthor || undefined,
            };
        } else {
            console.warn(`Forum with ID ${forumId} not found.`);
            return null;
        }
    } catch (err) {
        console.error(`Error fetching forum ${forumId}:`, err);
        return null;
    }
  }, []);


  // Handle opening the forum detail modal
  const handleOpenForumDetail = async (forum: Forum) => {
    setSelectedForum(forum);
    setIsForumDetailModalOpen(true);

    // Increment view count in Firestore
    try {
      const forumRef = doc(db, "forums", forum.id);
      await updateDoc(forumRef, {
        views: increment(1)
      });
      // Optimistically update local state for the viewed forum's view count
      setForums(prevForums =>
        prevForums.map(f =>
          f.id === forum.id ? { ...f, views: f.views + 1 } : f
        )
      );
      setSelectedForum(prev => prev ? { ...prev, views: prev.views + 1 } : null); // Update selectedForum too
    } catch (err) {
      console.error("Error incrementing view count:", err);
    }

    // Fetch replies and check like status after setting selectedForum
    if (user?.uid) {
      checkUserLikeStatus(forum.id, user.uid);
    }
  };

  // Handle closing the forum detail modal
  const handleCloseForumDetail = () => {
    setIsForumDetailModalOpen(false);
    setSelectedForum(null);
    setForumReplies([]);
    setNewReplyText("");
    setIsForumLikedByUser(false); // Reset like status
    setIsConfirmDeleteModalOpen(false); // Ensure delete modal is closed
    // Also close report modal if it was open (though it should be nested)
    setIsReportForumModalOpen(false); // This needs to be coordinated if the report modal is opened from inside this detail modal
    setReportReason("");
    setReportItemDetails(null);

    // If the detail modal was opened from the reported posts modal, re-open it
    if (sourceModal === 'reportedPosts') {
        setIsViewReportedPostsModalOpen(true);
        fetchReportedPosts(); // Refresh reported posts list
        setSourceModal('none'); // Reset source
    }
  };

  // Handle adding a new reply
  const handleAddReply = async () => {
    if (!user?.uid || !userData || !selectedForum || !newReplyText.trim()) {
      console.warn("Cannot add reply: User not logged in, no forum selected, or reply text is empty.");
      return;
    }

    setSubmittingReply(true);
    try {
      const initials = (userData.firstName?.[0] || 'U') + (userData.lastName?.[0] || 'S');
      const authorImagePlaceholder = `https://placehold.co/40x40/aabbcc/ffffff?text=${initials}`;
      const authorName = userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}` : userData.email || 'Anonymous User';

      const replyData: Omit<Reply, 'id'> = { // Use Omit to exclude 'id' when creating the object
        forumId: selectedForum.id,
        authorId: user.uid,
        authorName: authorName,
        authorImage: authorImagePlaceholder, // Use generated placeholder directly
        text: newReplyText.trim(),
        createdAt: Timestamp.now(),
        upvotes: 0,
        downvotes: 0,
        isExpert: currentUserIsExpert // Set isExpert based on current user's role
      };

      await addDoc(collection(db, `forums/${selectedForum.id}/replies`), replyData);

      // Increment replies count and update lastActivityAt, lastReplyText, lastReplyAuthor on the parent forum document
      const forumRef = doc(db, "forums", selectedForum.id);
      const now = Timestamp.now(); // Get current timestamp once
      await updateDoc(forumRef, {
        replies: increment(1),
        lastActivityAt: now, // Update 'last activity' timestamp on parent forum
        lastReplyText: newReplyText.trim(), // Store the latest reply text
        lastReplyAuthor: authorName,       // Store the latest reply author
      });

      setNewReplyText("");
      // Optimistically update the selected forum's replies count and lastActivityAt in local state for modal view
      setSelectedForum(prev => prev ? { ...prev, replies: prev.replies + 1, lastActivityAt: now, lastReplyText: newReplyText.trim(), lastReplyAuthor: authorName } : null);

      // Optimistically update the main forums list to reflect new replies count and last activity timestamp
      setForums(prevForums => prevForums.map(f =>
        f.id === selectedForum.id ? { ...f, replies: f.replies + 1, lastActivityAt: now, lastReplyText: newReplyText.trim(), lastReplyAuthor: authorName } : f
      ));

      await fetchReplies(selectedForum.id); // Re-fetch replies to show the new one
      console.log("Reply added successfully!");
    } catch (err) {
      console.error("Error adding reply:", err);
    } finally {
      setSubmittingReply(false);
    }
  };

  // Handle liking/unliking a forum
  const handleLikeUnlike = async () => {
    if (!user?.uid || !selectedForum) {
      console.warn("Cannot like/unlike: User not logged in or no forum selected.");
      return;
    }

    try {
      const likeDocRef = doc(db, `forums/${selectedForum.id}/likes`, user.uid);
      const forumRef = doc(db, "forums", selectedForum.id);

      if (isForumLikedByUser) {
        // User has liked, so unlike
        await deleteDoc(likeDocRef);
        await updateDoc(forumRef, {
          likes: increment(-1)
        });
        setIsForumLikedByUser(false);
        // Optimistically update selected forum's likes count
        setSelectedForum(prev => prev ? { ...prev, likes: prev.likes - 1 } : null);
      } else {
        // User has not liked, so like
        await setDoc(likeDocRef, { userId: user.uid, likedAt: Timestamp.now() });
        await updateDoc(forumRef, {
          likes: increment(1)
        });
        setIsForumLikedByUser(true);
        // Optimistically update selected forum's likes count
        setSelectedForum(prev => prev ? { ...prev, likes: prev.likes + 1 } : null);
      }
      // Optimistically update main forums list for likes count, instead of full fetch
      setForums(prevForums =>
        prevForums.map(f =>
          f.id === selectedForum.id
            ? { ...f, likes: isForumLikedByUser ? f.likes - 1 : f.likes + 1 }
            : f
        )
      );
    } catch (err) {
      console.error("Error liking/unliking forum:", err);
    }
  };

  // Handle upvote/downvote for a reply
  const handleReplyVote = async (replyId: string, currentVoteType: 'up' | 'down' | null, newVoteType: 'up' | 'down' | null) => {
    if (!user?.uid || !selectedForum) {
      console.warn("Cannot vote on reply: User not logged in or no forum selected.");
      return;
    }

    const replyRef = doc(db, `forums/${selectedForum.id}/replies`, replyId);
    const voteRef = doc(db, `forums/${selectedForum.id}/replies/${replyId}/votes`, user.uid);

    try {
      // Optimistically update UI
      setForumReplies(prevReplies =>
        prevReplies.map(reply => {
          if (reply.id === replyId) {
            let updatedUpvotes = reply.upvotes;
            let updatedDownvotes = reply.downvotes;

            if (newVoteType === 'up') {
              if (currentVoteType === 'up') { // Un-upvote
                updatedUpvotes--;
                newVoteType = null; // Set to null to remove vote
              } else { // Upvote or change from downvote
                updatedUpvotes++;
                if (currentVoteType === 'down') updatedDownvotes--;
              }
            } else if (newVoteType === 'down') {
              if (currentVoteType === 'down') { // Un-downvote
                updatedDownvotes--;
                newVoteType = null; // Set to null to remove vote
              } else { // Downvote or change from upvote
                updatedDownvotes++;
                if (currentVoteType === 'up') updatedUpvotes--;
              }
            }

            return {
              ...reply,
              upvotes: updatedUpvotes,
              downvotes: updatedDownvotes,
              userVote: newVoteType,
            };
          }
          return reply;
        })
      );


      // Update Firestore based on vote changes
      const updatePayload: { [key: string]: any } = {};

      if (newVoteType === 'up') {
        if (currentVoteType === 'up') { // User clicks upvote again (un-upvote)
          await deleteDoc(voteRef);
          updatePayload.upvotes = increment(-1);
        } else { // User upvotes, or changes from downvote to upvote
          await setDoc(voteRef, { type: 'up', userId: user.uid, votedAt: Timestamp.now() });
          updatePayload.upvotes = increment(1);
          if (currentVoteType === 'down') {
            updatePayload.downvotes = increment(-1);
          }
        }
      } else if (newVoteType === 'down') {
        if (currentVoteType === 'down') { // User clicks downvote again (un-downvote)
          await deleteDoc(voteRef);
          updatePayload.downvotes = increment(-1);
        } else { // User downvotes, or changes from upvote to downvote
          await setDoc(voteRef, { type: 'down', userId: user.uid, votedAt: Timestamp.now() });
          updatePayload.downvotes = increment(1);
          if (currentVoteType === 'up') {
            updatePayload.upvotes = increment(-1);
          }
        }
      } else { // New vote type is null, meaning "remove vote"
        await deleteDoc(voteRef);
        if (currentVoteType === 'up') {
          updatePayload.upvotes = increment(-1);
        } else if (currentVoteType === 'down') {
          updatePayload.downvotes = increment(-1);
        }
      }

      await updateDoc(replyRef, updatePayload);
      console.log(`Reply ${replyId} voted: ${newVoteType}`);

    } catch (err) {
      console.error("Error voting on reply:", err);
    }
  };

  // Handles creation of a new discussion
  const handleCreateNewDiscussion = async () => {
    if (!user?.uid || !userData || !newDiscussionTitle.trim() || !newDiscussionDescription.trim() || !newDiscussionCategory) {
      console.warn("Cannot create new discussion: User not logged in, or required fields are empty.");
      // Optionally show a user-friendly error message
      return;
    }

    setSubmittingNewDiscussion(true);
    try {
      const initials = (userData.firstName?.[0] || 'U') + (userData.lastName?.[0] || 'S');
      const authorImagePlaceholder = `https://placehold.co/40x40/aabbcc/ffffff?text=${initials}`;
      const authorName = userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}` : userData.email || 'Anonymous User';

      const now = Timestamp.now();
      const newForumData: Omit<Forum, 'id'> = { // Use Omit to exclude 'id'
        title: newDiscussionTitle.trim(),
        author: authorName,
        authorId: user.uid, // Store the author's UID
        authorImage: authorImagePlaceholder,
        date: now, // Original post date
        category: newDiscussionCategory,
        tags: newDiscussionTags.split(',').map(tag => tag.trim()).filter(tag => tag), // Split tags string into an array
        replies: 0,
        views: 0,
        likes: 0,
        solved: false,
        createdAt: now, // Original creation timestamp
        lastActivityAt: now, // Initial activity is creation
        description: newDiscussionDescription.trim(), // Save content as description
        // lastReplyText and lastReplyAuthor will be undefined initially
      };

      const docRef = await addDoc(collection(db, "forums"), newForumData);
      console.log("New discussion created with ID:", docRef.id);

      // Optimistically add the new forum to the beginning of the list
      setForums(prevForums => [
        { ...newForumData, id: docRef.id }, // Add the generated ID here
        ...prevForums
      ]);

      // Clear form and close modal
      setNewDiscussionTitle("");
      setNewDiscussionDescription(""); // Cleared description field
      setNewDiscussionCategory("Other/General"); // Reset to default
      setNewDiscussionTags("");
      setIsNewDiscussionModalOpen(false);

    } catch (error) {
      console.error("Error creating new discussion:", error);
      // Optionally show a user-friendly error message
    } finally {
      setSubmittingNewDiscussion(false);
    }
  };

  // Function to open the New Discussion modal
  const handleOpenNewDiscussionModal = () => {
    // Only open if user is logged in
    if (user) {
      setIsNewDiscussionModalOpen(true);
    } else {
      console.warn("Please log in to create a new discussion.");
      // Optionally show a prompt to log in
    }
  };

  // --- New Functionality: Delete Post ---
  const handleDeleteForum = async (forumToDelete: Forum) => {
    // Allow deletion if user is author OR is admin
    if (!user?.uid || !forumToDelete || (user.uid !== forumToDelete.authorId && !isAdmin)) {
      console.warn("Unauthorized or invalid request to delete forum.");
      return;
    }

    // Open confirmation modal
    setIsConfirmDeleteModalOpen(true);
  };

  const confirmDeleteForum = async () => {
    if (!selectedForum) return; // Should not happen if modal is opened correctly

    setSubmitting(true); // Use submitting state for general form operations
    try {
      const forumRef = doc(db, "forums", selectedForum.id);

      // Attempt to delete subcollections (replies and likes)
      // NOTE: For large numbers of sub-documents, this client-side approach can be slow and hit Firestore limits.
      // A Cloud Function is the recommended robust solution for cascade deletes.
      const repliesQuery = query(collection(forumRef, "replies"));
      const repliesSnapshot = await getDocs(repliesQuery);
      const likesQuery = query(collection(forumRef, "likes"));
      const likesSnapshot = await getDocs(likesQuery);

      const batch = writeBatch(db);

      repliesSnapshot.docs.forEach(replyDoc => {
        batch.delete(replyDoc.ref);
        // Optionally, delete sub-subcollections (e.g., votes on replies) if they existed
        // For votes: batch.delete(doc(replyDoc.ref, 'votes', someVoteId)); would be needed if you had individual vote documents
      });

      likesSnapshot.docs.forEach(likeDoc => {
        batch.delete(likeDoc.ref);
      });

      // Delete the main forum document
      batch.delete(forumRef);

      await batch.commit();

      // After successful deletion of the forum, delete associated reports
      const reportsQuery = query(
        collection(db, "reportedPosts"),
        where("itemId", "==", selectedForum.id),
        where("type", "==", "forum")
      );
      const reportsSnapshot = await getDocs(reportsQuery);
      const reportDeleteBatch = writeBatch(db); // Use a new batch for report deletions
      reportsSnapshot.docs.forEach(reportDoc => {
        reportDeleteBatch.delete(reportDoc.ref); // Delete the report document
      });
      await reportDeleteBatch.commit();
      console.log(`Associated reports for forum ${selectedForum.id} deleted.`);


      // Update local state
      setForums(prevForums => prevForums.filter(f => f.id !== selectedForum.id));
      handleCloseForumDetail(); // Close detail modal and reset selected forum
      console.log(`Forum ${selectedForum.id} and its subcollections deleted.`);
    } catch (err) {
      console.error("Error deleting forum:", err);
      setError("Failed to delete forum. Please try again.");
    } finally {
      setSubmitting(false);
      setIsConfirmDeleteModalOpen(false);
    }
  };


  // --- New Functionality: Mark as Solved ---
  const handleMarkAsSolved = async () => {
    // Only allow if user is author OR is admin
    if (!user?.uid || !selectedForum || (user.uid !== selectedForum.authorId && !isAdmin)) {
      console.warn("Unauthorized or invalid request to mark forum as solved.");
      return;
    }
    if (selectedForum.solved) {
      console.log("Forum is already marked as solved.");
      return;
    }

    setSubmitting(true);
    try {
      const forumRef = doc(db, "forums", selectedForum.id);
      await updateDoc(forumRef, {
        solved: true,
        lastActivityAt: Timestamp.now() // Update activity timestamp
      });

      // Optimistically update local state
      setSelectedForum(prev => prev ? { ...prev, solved: true } : null);
      setForums(prevForums => prevForums.map(f =>
        f.id === selectedForum.id ? { ...f, solved: true } : f
      ));
      console.log(`Forum ${selectedForum.id} marked as solved.`);
    } catch (err) {
      console.error("Error marking forum as solved:", err);
      setError("Failed to mark forum as solved. Please try again.");
    } finally {
      setSubmitting(false);
    }
  };

  // --- REPORTING FUNCTIONALITY ---
  // This handles showing the report modal for users. This function is present in app/forums/page.tsx too.
  const handleReportContent = (itemId: string, itemTitle: string, type: 'forum' | 'reply', parentForumId?: string) => {
    if (!user) {
      alert("Please log in to report content.");
      return;
    }
    setReportItemDetails({ id: itemId, title: itemTitle, type });
    // This `isReportForumModalOpen` seems to be intended for the USER's report modal, not the admin's. Keeping it for now but note its original intent.
    setIsReportForumModalOpen(true); // Keeping this for the modal state
  };

  const submitReport = async () => {
    if (!user?.uid || !userData || !reportItemDetails || !reportReason.trim()) {
      console.warn("Cannot submit report: Missing user, item details, or reason.");
      return;
    }

    setSubmittingReport(true);
    try {
      const reportsCollectionRef = collection(db, "reportedPosts");
      let existingReportQuery;

      if (reportItemDetails.type === 'forum') {
        existingReportQuery = query(
          reportsCollectionRef,
          where("itemId", "==", reportItemDetails.id),
          where("type", "==", "forum"),
          where("status", "==", "pending"), // Only check pending reports
          limit(1)
        );
      } else { // type === 'reply'
        existingReportQuery = query(
          reportsCollectionRef,
          where("itemId", "==", reportItemDetails.id),
          where("type", "==", "reply"),
          where("parentForumId", "==", selectedForum?.id), // Must have parentForumId for replies
          where("status", "==", "pending"),
          limit(1)
        );
      }

      const existingReportsSnapshot = await getDocs(existingReportQuery);

      if (!existingReportsSnapshot.empty) {
        // Update existing report
        const existingReportDoc = existingReportsSnapshot.docs[0];
        await updateDoc(existingReportDoc.ref, {
          reportCount: increment(1),
          reasons: arrayUnion(reportReason.trim()), // Add new reason to array, ensures uniqueness
          reportedAt: Timestamp.now(), // Update timestamp to latest report
        });
        console.log("Existing report updated with new reason:", existingReportDoc.id);
      } else {
        // Create new report
        const reportData: Omit<ReportedPost, 'id'> = {
          type: reportItemDetails.type,
          itemId: reportItemDetails.id,
          itemTitle: reportItemDetails.title,
          parentForumId: reportItemDetails.type === 'reply' ? selectedForum?.id : undefined, // Ensure parentForumId is set for replies
          reporterId: user.uid,
          reporterName: userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}` : userData.email || 'Anonymous User',
          reasons: [reportReason.trim()], // Initialize with the first reason
          reportCount: 1, // Initialize count to 1
          reportedAt: Timestamp.now(),
          status: 'pending',
        };
        await addDoc(reportsCollectionRef, reportData);
        console.log("New report created:", reportData);
      }

      setReportReason("");
      setReportItemDetails(null);
      setIsReportForumModalOpen(false); // Close report modal
      alert("Content has been reported successfully. Thank you for your feedback!");
    } catch (err) {
      console.error("Error submitting report:", err);
      alert("Failed to submit report. Please try again.");
    } finally {
      setSubmittingReport(false);
    }
  };


  // --- ADMIN: Fetch Reported Posts ---
  const fetchReportedPosts = useCallback(async () => {
    if (!isAdmin) {
      setReportedPosts([]); // Clear if not admin
      console.warn("Only admins can view reported posts.");
      return;
    }
    try {
      const q = query(collection(db, "reportedPosts"), orderBy("reportedAt", "desc"));
      const querySnapshot = await getDocs(q);
      const fetchedReports: ReportedPost[] = querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data() as Omit<ReportedPost, 'id'>
      }));
      setReportedPosts(fetchedReports);
    } catch (err) {
      console.error("Error fetching reported posts:", err);
      alert("Failed to fetch reported posts.");
    }
  }, [isAdmin]);

  // --- ADMIN: Handle clicking on a reported item to view it ---
  const handleViewReportedContent = useCallback(async (report: ReportedPost) => {
    if (!isAdmin) {
        alert("You must be an admin to view reported content details.");
        return;
    }

    setLoading(true); // Indicate loading while fetching content
    try {
        let forumToOpen: Forum | null = null;
        if (report.type === 'forum') {
            forumToOpen = await getForumById(report.itemId);
        } else if (report.type === 'reply') {
            if (report.parentForumId) {
                forumToOpen = await getForumById(report.parentForumId);
                if (forumToOpen) {
                  // Alert the admin to manually locate the reply within the opened forum
                  alert(`Opening the parent forum for the reported reply "${report.itemTitle}". Please locate the reply (ID: ${report.itemId}) manually within the replies section.`);
                }
            } else {
                alert("Cannot open reply directly: Parent forum ID is missing in the report. This report might be from an older version of the app or corrupted. You can dismiss it.");
                setLoading(false);
                return;
            }
        }

        if (forumToOpen) {
            // Temporarily close reported posts modal to allow forum detail to open cleanly
            setIsViewReportedPostsModalOpen(false);
            setSourceModal('reportedPosts'); // Set source to re-open later
            setSelectedForum(forumToOpen);
            setIsForumDetailModalOpen(true);
        } else {
            alert(`The original ${report.type} content (ID: ${report.itemId}) could not be found. It might have been deleted already.`);
        }
    } catch (err) {
        console.error("Error viewing reported content:", err);
        alert("Failed to load content for viewing. Please check console for details.");
    } finally {
        setLoading(false);
    }
  }, [isAdmin, getForumById, fetchReportedPosts]); // Added fetchReportedPosts to dependencies


  // --- ADMIN: Handle Reported Post Actions (Placeholders) ---
  const handleDismissReport = async (reportId: string) => {
    if (!isAdmin) return;
    try {
      const reportRef = doc(db, "reportedPosts", reportId);
      await updateDoc(reportRef, {
        status: 'dismissed',
        resolvedBy: user?.uid || 'admin', // Assuming admin is logged in
        resolvedAt: Timestamp.now()
      });
      console.log(`Report ${reportId} dismissed.`);
      fetchReportedPosts(); // Refresh list
    } catch (err) {
      console.error("Error dismissing report:", err);
      alert("Failed to dismiss report.");
    }
  };

  const handleDeleteReportedContent = async (report: ReportedPost) => {
    if (!isAdmin) return;
    if (!confirm(`Are you sure you want to DELETE this ${report.type} and mark the report as actioned? This cannot be undone.`)) {
      return;
    }

    setSubmitting(true);
    try {
      if (report.type === 'forum') {
        const forumRef = doc(db, "forums", report.itemId);
        // This is a simplified deletion. A full cascade delete should be handled by Cloud Functions.
        await deleteDoc(forumRef);
        console.log(`Forum ${report.itemId} deleted.`);
      } else if (report.type === 'reply') {
        // To delete a reply, we need both forumId and replyId.
        // Assuming report.parentForumId exists for replies reported by updated app/forums.
        if (report.parentForumId) {
            const replyRef = doc(db, `forums/${report.parentForumId}/replies`, report.itemId);
            await deleteDoc(replyRef);
            console.log(`Reply ${report.itemId} from forum ${report.parentForumId} deleted.`);

            // Also decrement reply count on parent forum
            const forumRef = doc(db, "forums", report.parentForumId);
            await updateDoc(forumRef, { replies: increment(-1) });
        } else {
            console.error("Cannot delete reply: Parent forum ID missing in report.", report);
            alert("Cannot delete reply: Parent forum ID missing. You may need to manually delete it or dismiss the report.");
            setSubmitting(false); // Important: reset submitting if we return early
            return;
        }
      }

      // Delete the *specific* report that triggered this action
      const reportRef = doc(db, "reportedPosts", report.id);
      await deleteDoc(reportRef);
      console.log(`Report ${report.id} deleted as content was removed.`);

      // Additionally, delete *all other* pending reports for the same item
      let relatedReportsQueryRef = query( // Correctly re-assigning the query
        collection(db, "reportedPosts"),
        where("itemId", "==", report.itemId),
        where("type", "==", report.type),
        where("status", "==", "pending") // Only target pending reports
      );
      if (report.type === 'reply' && report.parentForumId) {
        relatedReportsQueryRef = query(relatedReportsQueryRef, where("parentForumId", "==", report.parentForumId)); // Correct way to add a conditional where clause
      }
      const relatedReportsSnapshot = await getDocs(relatedReportsQueryRef);
      const relatedReportBatch = writeBatch(db);

      relatedReportsSnapshot.docs.forEach(relatedReportDoc => {
        // Ensure we don't try to delete the one we just deleted
        if (relatedReportDoc.id !== report.id) {
          relatedReportBatch.delete(relatedReportDoc.ref);
        }
      });
      await relatedReportBatch.commit();
      console.log(`All related pending reports for item ${report.itemId} deleted.`);


      fetchReportedPosts(); // Refresh list to reflect changes
    } catch (err) {
      console.error("Error deleting reported content:", err);
      alert("Failed to delete content related to report.");
    } finally {
      setSubmitting(false);
    }
  };


  useEffect(() => {
    setForums([]);
    setLastVisible(null);
    setHasMore(true);
    fetchForums(activeTab, null, false);
  }, [activeTab, fetchForums]);

  // Fetch categories on component mount
  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]); // Dependency array to run once on mount

  // Fetch reported posts when admin modal is opened
  useEffect(() => {
    if (isViewReportedPostsModalOpen && isAdmin) {
      fetchReportedPosts();
    }
  }, [isViewReportedPostsModalOpen, isAdmin, fetchReportedPosts]);


  useEffect(() => {
    if (selectedForum) {
      fetchReplies(selectedForum.id);
      if (user?.uid) {
        checkUserLikeStatus(selectedForum.id, user.uid);
      } else {
        setIsForumLikedByUser(false); // Ensure like status is false if user logs out while modal is open
      }
    }
  }, [selectedForum, user?.uid, fetchReplies, checkUserLikeStatus]);


  const handleLoadMore = () => {
    if (hasMore && !loading) {
      fetchForums(activeTab, lastVisible, true);
    }
  };

  const handleTabChange = (value: string) => {
    setActiveTab(value);
  };

  if (authLoading || loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <p className="ml-2 text-lg">Loading forums...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container py-8 px-4 text-center text-red-500">
        <p>{error}</p>
        <Button onClick={() => fetchForums(activeTab, null, false)} className="mt-4">
          Try Again
        </Button>
      </div>
    );
  }

  // Combine hardcoded and fetched categories for tabs, ensuring uniqueness and 'all' first
  const allAvailableCategories = ["all", ...initialCategories, ...categories.map(c => c.name)]
    .filter((value, index, self) => self.indexOf(value) === index) // Unique values
    .sort((a, b) => { // Sort "all" first, then alphabetically
      if (a === "all") return -1;
      if (b === "all") return 1;
      return a.localeCompare(b);
    });

  return (
    <div className="container py-8 px-4">
      {/* Admin Actions Card (Visible only to Admin) */}
      {isAdmin && (
        <Card className="mb-8 border-primary-foreground bg-primary/10 dark:bg-primary-foreground/10">
          <CardHeader>
            <CardTitle className="text-xl flex items-center gap-2 text-primary dark:text-primary-foreground">
              <ShieldCheck className="h-6 w-6" /> Admin Actions
            </CardTitle>
            <CardDescription className="text-muted-foreground">
              Manage forum content and user interactions.
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-wrap gap-4">
            <Button variant="outline" className="gap-2" onClick={() => setIsManageCategoriesModalOpen(true)}>
              <Settings className="h-4 w-4" /> Manage Categories
            </Button>
            <Button variant="outline" className="gap-2" onClick={() => setIsViewReportedPostsModalOpen(true)}>
              <Eye className="h-4 w-4" /> View Reported Posts
            </Button>
          </CardContent>
        </Card>
      )}

      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold mb-2">Student Forums</h1>
          <p className="text-muted-foreground">Ask questions, share insights, and learn from peers and experts</p>
        </div>
        <div className="flex gap-2">
          {user && ( // Only show "New Discussion" button if user is logged in
            <Button onClick={handleOpenNewDiscussionModal}>
              <MessageSquare className="mr-2 h-4 w-4" />
              New Discussion
            </Button>
          )}
          {!user && ( // Show disabled button or message if not logged in
            <Button disabled className="cursor-not-allowed opacity-70">
              <MessageSquare className="mr-2 h-4 w-4" />
              New Discussion (Login to post)
            </Button>
          )}
        </div>
      </div>

      <Tabs defaultValue="all" value={activeTab} onValueChange={handleTabChange} className="mb-8">
        <TabsList className="grid grid-cols-4 md:grid-cols-7 mb-8">
          {allAvailableCategories.map(cat => (
            <TabsTrigger key={cat} value={cat}>
              {cat === "Other/General" ? "Other" : cat.split('/')[0]} {/* Display only first part if "Other/General" */}
            </TabsTrigger>
          ))}
        </TabsList>

        <TabsContent value={activeTab} className="mt-0">
          {!loading && !error && forums.length === 0 && (
            <div className="text-center text-muted-foreground py-10">
              <p>No forums found for this category.</p>
            </div>
          )}

          <div className="grid gap-4">
            {forums.map((forum) => (
              <Card key={forum.id} className="hover:shadow-md transition-shadow cursor-pointer" onClick={() => handleOpenForumDetail(forum)}>
                <CardHeader className="pb-2">
                  <div className="flex justify-between">
                    <div className="flex items-start gap-4">
                      <Image
                        src={forum.authorImage || "/placeholder.svg"}
                        alt={forum.author}
                        width={40}
                        height={40}
                        className="rounded-full"
                      />
                      <div>
                        <CardTitle className="text-lg">
                          <Link href={`/forums/${forum.id}`} onClick={(e) => { e.preventDefault(); handleOpenForumDetail(forum); }} className="hover:text-primary transition-colors">
                            {forum.title}
                          </Link>
                        </CardTitle>
                        <CardDescription>
                          Posted by <span className="font-medium">{forum.author}</span> • {formatFirestoreTimestamp(forum.date)}
                        </CardDescription>
                      </div>
                    </div>
                    {/* Hydration fix: Badge is now correctly placed */}
                    {forum.solved && (
                      <Badge className="ml-2 bg-green-500 text-white">
                        Solved
                      </Badge>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="pb-2">
                  {/* Display main description if available */}
                  {forum.description && (
                    <p className="text-sm text-muted-foreground line-clamp-3 mb-3">
                      {forum.description}
                    </p>
                  )}
                  <div className="flex flex-wrap gap-2">
                    {forum.tags.map((tag, i) => (
                      <Badge key={i} variant="outline">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                  {/* Display Top Reply on Main Card (only if replies exist) */}
                  {forum.lastReplyText && forum.lastReplyAuthor && forum.replies > 0 && (
                    <div className="mt-4 pt-3 border-t border-gray-200 dark:border-gray-700 text-sm">
                      <p className="font-semibold text-muted-foreground">Latest reply by {forum.lastReplyAuthor}:</p>
                      <p className="text-gray-700 dark:text-gray-300 line-clamp-2">{forum.lastReplyText}</p>
                    </div>
                  )}
                </CardContent>
                <CardFooter className="flex justify-between text-sm text-muted-foreground">
                  <div className="flex gap-4">
                    <span className="flex items-center">
                      <MessageSquare className="mr-1 h-4 w-4" />
                      {forum.replies} replies
                    </span>
                    <span className="flex items-center">
                      <Eye className="mr-1 h-4 w-4" />
                      {forum.views} views
                    </span>
                    <span className="flex items-center">
                      <ThumbsUp className="mr-1 h-4 w-4" />
                      {forum.likes} likes
                    </span>
                  </div>
                  <span className="flex items-center">
                    <Clock className="mr-1 h-4 w-4" />
                    Last activity: {formatFirestoreTimestamp(forum.lastActivityAt)}
                  </span>
                </CardFooter>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>

      {hasMore && (
        <div className="flex justify-center mt-8">
          <Button onClick={handleLoadMore} disabled={loading} variant="outline">
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Loading More...
              </>
            ) : (
              "Load More"
            )}
          </Button>
        </div>
      )}

      {/* Forum Detail Modal */}
      <Dialog open={isForumDetailModalOpen} onOpenChange={handleCloseForumDetail}>
        <DialogContent className="sm:max-w-[850px] max-h-[90vh] overflow-y-auto p-6"> {/* Larger, more padding */}
          {selectedForum && (
            <>
              <DialogHeader>
                {/* Hydration fix: Badge is now correctly placed */}
                <DialogTitle className="text-2xl font-bold flex items-center">
                  {selectedForum.title}
                  {selectedForum.solved && (
                    <Badge className="ml-3 bg-green-500 text-white text-base">Solved</Badge>
                  )}
                </DialogTitle>
                <DialogDescription className="mt-1">
                  Posted by <span className="font-semibold">{selectedForum.author}</span> •{" "}
                  {formatFirestoreTimestamp(selectedForum.date)}
                </DialogDescription>
              </DialogHeader>

              {/* Forum Details: Display description */}
              {selectedForum.description && (
                <div className="my-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-md"> {/* Added subtle background */}
                  <p className="text-base text-gray-800 dark:text-gray-200">
                    {selectedForum.description}
                  </p>
                </div>
              )}

              <div className="flex flex-wrap gap-2 mt-3">
                {selectedForum.tags.map((tag, i) => (
                  <Badge key={i} variant="secondary">
                    {tag}
                  </Badge>
                ))}
              </div>
              <div className="flex items-center gap-4 text-sm text-muted-foreground mt-4">
                <span className="flex items-center">
                  <MessageSquare className="mr-1 h-4 w-4" />
                  {selectedForum.replies}
                </span>
                <span className="flex items-center">
                  <Eye className="mr-1 h-4 w-4" />
                  {selectedForum.views}
                </span>
                <span className="flex items-center gap-1">
                  <Heart className={cn("h-4 w-4 transition-colors", isForumLikedByUser ? "text-red-500 fill-red-500" : "text-gray-500")} />
                  {selectedForum.likes}
                </span>

                {user && ( // Only show like button if user is logged in
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleLikeUnlike}
                    disabled={submittingReply}
                    className={cn(
                      "ml-auto rounded-md px-3 py-1 text-sm flex items-center transition-all duration-200",
                      isForumLikedByUser ? "bg-red-500 text-white hover:bg-red-600" : "bg-transparent text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
                    )}
                  >
                    <Heart
                      className={cn(
                        "mr-1 h-4 w-4 transition-colors",
                        isForumLikedByUser ? "fill-white" : "text-gray-500 dark:text-gray-300"
                      )}
                    />
                    {isForumLikedByUser ? "Liked" : "Like"}
                  </Button>
                )}
              </div>

              {/* Action Buttons for Post Creator & Admin */}
              <div className="flex gap-3 mt-4 justify-end">
                {user && (
                    <Button
                        variant="outline"
                        onClick={() => handleReportContent(selectedForum.id, selectedForum.title, 'forum')}
                        className="text-red-500 hover:text-red-600 border-red-500 hover:border-red-600"
                    >
                        <Flag className="mr-2 h-4 w-4" /> Report Post
                    </Button>
                )}
                {(user?.uid === selectedForum.authorId || isAdmin) && ( // Only show if not solved AND is author/admin
                  <>
                    {!selectedForum.solved && (
                      <Button
                        variant="outline"
                        onClick={handleMarkAsSolved}
                        disabled={submitting}
                        className="text-green-600 hover:text-green-700 border-green-600 hover:border-green-700"
                      >
                        <CheckCircle2 className="mr-2 h-4 w-4" />
                        {submitting ? "Marking..." : "Mark as Solved"}
                      </Button>
                    )}
                    <Button
                      variant="destructive"
                      onClick={() => handleDeleteForum(selectedForum)}
                      disabled={submitting}
                    >
                      <Trash2 className="mr-2 h-4 w-4" />
                      {submitting ? "Deleting..." : "Delete Post"}
                    </Button>
                  </>
                )}
              </div>

              {/* Replies Section */}
              <h3 className="text-xl font-semibold mb-3 mt-6">Replies ({forumReplies.length})</h3>
              <div className="space-y-4 max-h-[300px] overflow-y-auto pr-2">
                {forumReplies.length === 0 ? (
                  <p className="text-muted-foreground text-sm p-4 rounded-md bg-gray-50 dark:bg-gray-800">No replies, start the conversation!</p>
                ) : (
                  forumReplies.map((reply) => (
                    <div key={reply.id!} className={cn(
                      "flex items-start gap-3 p-4 rounded-lg", // Increased padding
                      reply.isExpert
                        ? "bg-yellow-50 dark:bg-yellow-950 border-l-4 border-yellow-500 shadow-md transition-all duration-300" // Expert styling
                        : "bg-gray-50 dark:bg-gray-800" // Normal reply styling
                    )}>
                      <Avatar className="h-9 w-9"> {/* Slightly larger avatar */}
                        {reply.authorImage && reply.authorImage !== "/placeholder.svg" ? (
                          <Image
                            src={reply.authorImage}
                            alt={reply.authorName}
                            width={36}
                            height={36}
                            className="rounded-full"
                          />
                        ) : (
                          <AvatarFallback>
                            {reply.authorName ? reply.authorName.split(' ').map(n => n[0]).join('').toUpperCase() : <UserIcon className="h-5 w-5" />}
                          </AvatarFallback>
                        )}
                      </Avatar>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 text-sm">
                          <span className="font-semibold text-gray-900 dark:text-gray-100">{reply.authorName}</span> {/* Stronger text */}
                          {reply.isExpert && ( // Expert badge
                            <Badge variant="outline" className="bg-yellow-200 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-200">
                              <Award className="h-3 w-3 mr-1" /> Expert Reply
                            </Badge>
                          )}
                          <span className="text-muted-foreground">• {formatFirestoreTimestamp(reply.createdAt)}</span>
                        </div>
                        <p className="text-base mt-1 text-gray-700 dark:text-gray-300">{reply.text}</p> {/* Larger text */}
                        {user && (
                          <div className="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-7 w-7 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
                              onClick={() => handleReplyVote(reply.id!, reply.userVote || null, reply.userVote === 'up' ? null : 'up')}
                            >
                              <ThumbsUp
                                className={cn(
                                  "h-4 w-4 transition-colors",
                                  reply.userVote === 'up' ? "text-blue-500 fill-blue-500" : "text-gray-500 hover:text-blue-400"
                                )}
                              />
                            </Button>
                            <span className="text-sm">{reply.upvotes}</span> {/* Larger vote count */}

                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-7 w-7 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 ml-2"
                              onClick={() => handleReplyVote(reply.id!, reply.userVote || null, reply.userVote === 'down' ? null : 'down')}
                            >
                              <ThumbsDown
                                className={cn(
                                  "h-4 w-4 transition-colors",
                                  reply.userVote === 'down' ? "text-red-500 fill-red-500" : "text-gray-500 hover:text-red-400"
                                )}
                              />
                            </Button>
                            <span className="text-sm">{reply.downvotes}</span> {/* Larger vote count */}
                            {/* Report Reply Button */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="h-7 w-7 rounded-full ml-auto"
                                onClick={(e) => {
                                    e.stopPropagation(); // Prevent closing main modal
                                    handleReportContent(reply.id!, reply.text.substring(0, 50) + "...", 'reply', selectedForum.id); // Pass parentForumId
                                }}
                            >
                                <Flag className="h-4 w-4 text-red-400 hover:text-red-600" />
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  ))
                )}
              </div>

              {/* Add Reply Input */}
              {user && ( // Only show reply input if user is logged in
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <Label htmlFor="new-reply" className="mb-2 block font-semibold">Add your reply</Label>
                  <Textarea
                    id="new-reply"
                    placeholder="Type your reply here..."
                    value={newReplyText}
                    onChange={(e) => setNewReplyText(e.target.value)}
                    rows={3}
                    className="w-full mb-3"
                    disabled={submittingReply}
                  />
                  <Button onClick={handleAddReply} disabled={submittingReply || !newReplyText.trim()}>
                    {submittingReply ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Submitting...
                      </>
                    ) : (
                      "Submit Reply"
                    )}
                  </Button>
                </div>
              )}
              {!user && (
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700 text-center text-muted-foreground">
                  <p>Please log in to add a reply or like this post.</p>
                  <Link href="/login" passHref>
                    <Button variant="link" className="mt-2">Log In</Button>
                  </Link>
                </div>
              )}
            </>
          )}
        </DialogContent>
      </Dialog>

      {/* New Discussion Modal */}
      <Dialog open={isNewDiscussionModalOpen} onOpenChange={setIsNewDiscussionModalOpen}>
        <DialogContent className="sm:max-w-[600px] p-6"> {/* Added padding */}
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold">Start a New Discussion</DialogTitle>
            <DialogDescription className="mt-1">
              Create a new forum post to ask a question or share insights.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="new-title" className="text-right">
                Title
              </Label>
              <Input
                id="new-title"
                value={newDiscussionTitle}
                onChange={(e) => setNewDiscussionTitle(e.target.value)}
                className="col-span-3"
                placeholder="E.g., How to ace Infosys SQL interview?"
                disabled={submittingNewDiscussion}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="new-category" className="text-right">
                Category
              </Label>
              <Select
                value={newDiscussionCategory}
                onValueChange={setNewDiscussionCategory}
                disabled={submittingNewDiscussion}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select a category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((category) => ( // Use dynamically fetched categories
                    <SelectItem key={category.id} value={category.name}>
                      {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="new-tags" className="text-right">
                Tags
              </Label>
              <Input
                id="new-tags"
                value={newDiscussionTags}
                onChange={(e) => setNewDiscussionTags(e.target.value)}
                className="col-span-3"
                placeholder="Comma-separated (e.g., Python, DSA, Interview)"
                disabled={submittingNewDiscussion}
              />
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="new-description" className="text-right">
                Description
              </Label>
              <Textarea
                id="new-description"
                value={newDiscussionDescription}
                onChange={(e) => setNewDiscussionDescription(e.target.value)}
                className="col-span-3"
                rows={5}
                placeholder="Write your detailed question or discussion here..."
                disabled={submittingNewDiscussion}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsNewDiscussionModalOpen(false)} disabled={submittingNewDiscussion}>
              Cancel
            </Button>
            <Button onClick={handleCreateNewDiscussion} disabled={submittingNewDiscussion || !newDiscussionTitle.trim() || !newDiscussionDescription.trim()}>
              {submittingNewDiscussion ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Creating...
                </>
              ) : (
                "Create Post"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Confirmation Dialog for Deletion */}
      <Dialog open={isConfirmDeleteModalOpen} onOpenChange={setIsConfirmDeleteModalOpen}>
        <DialogContent className="p-6"> {/* Added padding */}
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription className="mt-1">
              Are you sure you want to delete this forum post? This action cannot be undone. All replies and likes associated with this post will also be deleted.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsConfirmDeleteModalOpen(false)} disabled={submitting}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={confirmDeleteForum} disabled={submitting}>
              {submitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Deleting...
                </>
              ) : (
                "Delete"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Admin Action Modals */}
      {/* Manage Categories Modal */}
      <Dialog open={isManageCategoriesModalOpen} onOpenChange={setIsManageCategoriesModalOpen}>
        <DialogContent className="sm:max-w-[425px] p-6"> {/* Added padding */}
          <DialogHeader>
            <DialogTitle>Manage Categories</DialogTitle>
            <DialogDescription className="mt-1">
              Add or delete discussion categories.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="flex items-center gap-2">
              <Input
                placeholder="New category name"
                value={newCategoryName}
                onChange={(e) => setNewCategoryName(e.target.value)}
                className="flex-1"
              />
              <Button onClick={handleAddCategory} disabled={!newCategoryName.trim()}>
                <Plus className="h-4 w-4 mr-2" /> Add
              </Button>
            </div>
            <h4 className="font-semibold mt-2">Current Categories:</h4>
            <div className="flex flex-wrap gap-2 max-h-40 overflow-y-auto border p-2 rounded-md bg-gray-50 dark:bg-gray-800"> {/* Added subtle background */}
              {categories.length === 0 ? (
                <p className="text-muted-foreground text-sm">No custom categories yet. Add one above!</p>
              ) : (
                categories.map((cat) => (
                  <Badge key={cat.id} variant="secondary" className="flex items-center gap-1">
                    {cat.name}
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-4 w-4 p-0 ml-1 opacity-50 hover:opacity-100"
                      onClick={() => handleDeleteCategory(cat.id, cat.name)}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                ))
              )}
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsManageCategoriesModalOpen(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Report Forum/Content Modal (This modal is primarily for *users* to report, not admins to view/create reports directly) */}
      <Dialog open={isReportForumModalOpen} onOpenChange={setIsReportForumModalOpen}>
        <DialogContent className="sm:max-w-[425px] p-6"> {/* Added padding */}
          <DialogHeader>
            <DialogTitle>Report Content</DialogTitle>
            <DialogDescription className="mt-1">
              Please provide a reason for reporting this content.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {reportItemDetails && (
              <p className="text-sm text-muted-foreground">
                Reporting: <span className="font-semibold">{reportItemDetails.type.toUpperCase()}</span> "{reportItemDetails.title}"
              </p>
            )}
            <Label htmlFor="report-reason">Reason</Label>
            <Textarea
              id="report-reason"
              placeholder="e.g., Spam, Inappropriate content, Misinformation"
              value={reportReason}
              onChange={(e) => setReportReason(e.target.value)}
              rows={4}
              disabled={submittingReport}
            />
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsReportForumModalOpen(false)} disabled={submittingReport}>
              Cancel
            </Button>
            <Button onClick={submitReport} disabled={submittingReport || !reportReason.trim()}>
              {submittingReport ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Submitting...
                </>
              ) : (
                "Submit Report"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>


      {/* View Reported Posts Modal */}
      <Dialog open={isViewReportedPostsModalOpen} onOpenChange={setIsViewReportedPostsModalOpen}>
        <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto p-6"> {/* Increased width, added padding */}
          <DialogHeader>
            <DialogTitle>View Reported Posts</DialogTitle>
            <DialogDescription className="mt-1">
              Monitor and action posts reported by users.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4 space-y-4">
            {reportedPosts.length === 0 ? (
              <p className="text-muted-foreground text-center p-4 bg-gray-50 dark:bg-gray-800 rounded-md">No reported posts to display at this time.</p>
            ) : (
              <div className="space-y-3">
                {reportedPosts.map((report) => (
                  <Card
                    key={report.id}
                    className={cn(
                      "flex flex-col md:flex-row md:items-center justify-between p-4 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 cursor-pointer hover:shadow-md transition-shadow", // Enhanced card styling
                      report.status === 'dismissed' && "opacity-70 bg-gray-100 dark:bg-gray-850", // Less opaque
                      report.status === 'actioned' && "opacity-50 bg-red-50 dark:bg-red-950" // Less opaque, red tint
                    )}
                    onClick={() => handleViewReportedContent(report)} // Click handler for the whole card
                  >
                    <div className="flex-1 pr-4"> {/* Added padding-right */}
                      <div className="flex items-center flex-wrap gap-x-2"> {/* Allow wrapping for long titles/badges */}
                        <p className="text-base font-semibold text-gray-900 dark:text-gray-100">
                          {report.type === 'forum' ? 'Forum:' : 'Reply:'}
                          <span className="ml-1 text-blue-700 dark:text-blue-400 hover:underline">
                              "{report.itemTitle}"
                          </span>
                        </p>
                        <Badge variant="outline" className={cn("mt-1 md:mt-0", { // Adjust margin for small screens
                            "bg-yellow-100 text-yellow-800 dark:bg-yellow-700 dark:text-yellow-100": report.status === 'pending',
                            "bg-gray-200 text-gray-700 dark:bg-gray-600 dark:text-gray-200": report.status === 'dismissed',
                            "bg-red-100 text-red-700 dark:bg-red-700 dark:text-red-100": report.status === 'actioned',
                        })}>
                            {report.status}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">
                        Reported by: <span className="font-medium">{report.reporterName}</span> • Total reports: <span className="font-medium">{report.reportCount}</span>
                        on {formatFirestoreTimestamp(report.reportedAt)}
                      </p>
                      {report.reasons && report.reasons.length > 0 && (
                        <div className="mt-2 text-sm text-gray-700 dark:text-gray-300">
                          <span className="font-medium">Reasons:</span>
                          <ul className="list-disc list-inside ml-2">
                            {report.reasons.map((reason, idx) => (
                              <li key={idx}>{reason}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      {(report.status === 'dismissed' || report.status === 'actioned') && (
                        <p className="text-xs text-muted-foreground mt-1">
                          Resolved by: {report.resolvedBy} on {report.resolvedAt ? formatFirestoreTimestamp(report.resolvedAt) : 'N/A'}
                        </p>
                      )}
                    </div>
                    {report.status === 'pending' && (
                      <div className="flex flex-col md:flex-row gap-2 mt-3 md:mt-0 md:ml-4 flex-shrink-0"> {/* Flex-shrink to prevent overflow */}
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={(e) => { e.stopPropagation(); handleDismissReport(report.id); }} // Stop propagation
                          disabled={submitting}
                        >
                          Dismiss
                        </Button>
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={(e) => { e.stopPropagation(); handleDeleteReportedContent(report); }} // Stop propagation
                          disabled={submitting}
                        >
                          Delete Content
                        </Button>
                      </div>
                    )}
                  </Card>
                ))}
              </div>
            )}
          </div>
          <DialogFooter className="pt-4"> {/* Added padding-top */}
            <Button variant="outline" onClick={() => setIsViewReportedPostsModalOpen(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
