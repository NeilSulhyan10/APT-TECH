// app/forums/page.tsx
"use client";

import { useState, useEffect, useCallback } from "react";
import { db } from "@/config/firebase"; // Your Firebase client SDK instance
import {
  collection,
  query,
  orderBy,
  where,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  increment,
  getDoc,
  setDoc,
  limit,
  startAfter,
  DocumentData,
  QueryDocumentSnapshot,
  Timestamp,
} from "firebase/firestore";
import { formatDistanceToNowStrict } from 'date-fns';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { cn } from "@/lib/utils";

import { MessageSquare, ThumbsUp, ThumbsDown, Eye, Clock, User as UserIcon, Heart, Award, Loader2, Flag } from "lucide-react"; // Added Flag icon
import Link from "next/link";
import Image from "next/image";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

// Import useAuth and UserData from your AuthContext
import { useAuth, UserData } from "@/app/context/authContext";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";


// Define interfaces for forum data, reflecting Firestore structure
interface Forum {
  id: string; // Firestore Document ID
  title: string;
  author: string;
  authorId: string; // Added authorId to Forum interface
  authorImage: string;
  date: Timestamp; // Original creation timestamp of the post
  category: string;
  tags: string[];
  replies: number; // Count of replies
  views: number;   // Count of views
  likes: number;   // Count of likes
  solved: boolean;
  createdAt: Timestamp; // Original creation time of the forum post
  lastActivityAt: Timestamp; // New field for last activity time (reply, like, view, etc.)
  description?: string; // New: Full description/content of the main post
  lastReplyText?: string; // Snippet of the last reply (only if replies exist)
  lastReplyAuthor?: string; // Author of the last reply (only if replies exist)
}

// Define interface for replies
interface Reply {
  id?: string; // Made 'id' optional as it's generated by Firestore on add
  forumId: string; // ID of the parent forum
  authorId: string;
  authorName: string;
  authorImage: string;
  text: string;
  createdAt: Timestamp;
  upvotes: number;
  downvotes: number;
  // Local state to track user's vote on this specific reply
  userVote?: 'up' | 'down' | null;
  isExpert?: boolean; // New: To mark if the reply is from an expert
}

// Interface for Category data stored in Firestore
interface Category {
  id: string;
  name: string;
  createdAt: Timestamp;
}

// New Interface for Reported Post data stored in Firestore
interface ReportedPost {
  id: string;
  type: 'forum' | 'reply';
  itemId: string;
  itemTitle: string; // Title/snippet of the reported content
  reporterId: string;
  reporterName: string;
  reason: string;
  reportedAt: Timestamp;
  status: 'pending' | 'dismissed' | 'actioned';
  resolvedBy?: string;
  resolvedAt?: Timestamp;
}

const ITEMS_PER_PAGE = 6;


export default function ForumsPage() {
  const { user, userData, loading: authLoading } = useAuth();
  const currentUserIsExpert = userData?.role === 'expert';

  // Initial categories for the tabs, combined with fetched ones later
  const initialCategories = ["TCS", "Infosys", "Capgemini", "Wipro", "Aptitude", "Coding", "Other/General"];

  const [forums, setForums] = useState<Forum[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>("all");
  const [lastVisible, setLastVisible] = useState<QueryDocumentSnapshot<DocumentData> | null>(null);
  const [hasMore, setHasMore] = useState(true);

  // States for the forum detail modal
  const [isForumDetailModalOpen, setIsForumDetailModalOpen] = useState(false);
  const [selectedForum, setSelectedForum] = useState<Forum | null>(null);
  const [forumReplies, setForumReplies] = useState<Reply[]>([]);
  const [newReplyText, setNewReplyText] = useState<string>("");
  const [submittingReply, setSubmittingReply] = useState(false);
  const [isForumLikedByUser, setIsForumLikedByUser] = useState(false);

  // States for New Discussion Modal (users can create discussions)
  const [isNewDiscussionModalOpen, setIsNewDiscussionModalOpen] = useState(false);
  const [newDiscussionTitle, setNewDiscussionTitle] = useState("");
  const [newDiscussionDescription, setNewDiscussionDescription] = useState("");
  const [newDiscussionCategory, setNewDiscussionCategory] = useState("Other/General");
  const [newDiscussionTags, setNewDiscussionTags] = useState("");
  const [submittingNewDiscussion, setSubmittingNewDiscussion] = useState(false);

  // Admin action modals & states - NOT present on public forum page, but categories are needed
  const [categories, setCategories] = useState<Category[]>([]); // Dynamic list of categories from Firestore

  // State for Reporting a Forum/Reply
  const [isReportContentModalOpen, setIsReportContentModalOpen] = useState(false);
  const [reportReason, setReportReason] = useState("");
  const [submittingReport, setSubmittingReport] = useState(false);
  const [reportItemDetails, setReportItemDetails] = useState<{ id: string; title: string; type: 'forum' | 'reply' } | null>(null);

  // New states to track reported status for current modal session
  const [reportedForumIdInModal, setReportedForumIdInModal] = useState<string | null>(null);
  const [reportedReplyIdsInModal, setReportedReplyIdsInModal] = useState<Set<string>>(new Set());


  // Function to format Firestore Timestamp to a readable string like "X days ago"
  const formatFirestoreTimestamp = (timestamp: Timestamp) => {
    if (!timestamp || !timestamp.toDate) {
      return "N/A";
    }
    const date = timestamp.toDate();
    return formatDistanceToNowStrict(date, { addSuffix: true });
  };

  // --- Category Fetching for Tabs ---
  const fetchCategories = useCallback(async () => {
    try {
      const q = query(collection(db, "categories"), orderBy("name", "asc"));
      const querySnapshot = await getDocs(q);
      const fetchedCategories: Category[] = [];
      querySnapshot.forEach((doc) => {
        fetchedCategories.push({
          id: doc.id,
          name: doc.data().name,
          createdAt: doc.data().createdAt,
        });
      });
      setCategories(fetchedCategories);
    } catch (err) {
      console.error("Error fetching categories:", err);
      // No alert for users here, just log error
    }
  }, []);


  // Function to fetch forums from Firestore
  const fetchForums = useCallback(async (category: string, lastDoc: QueryDocumentSnapshot<DocumentData> | null, append: boolean = false) => {
    setLoading(true);
    setError(null);

    try {
      let q = query(
        collection(db, "forums"),
        orderBy("lastActivityAt", "desc") // Order by lastActivityAt for main list
      );

      if (category !== "all") {
        q = query(q, where("category", "==", category));
      }

      if (lastDoc) {
        q = query(q, startAfter(lastDoc));
      }

      q = query(q, limit(ITEMS_PER_PAGE));

      const querySnapshot = await getDocs(q);
      const newForums: Forum[] = [];

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const forumItem: Forum = {
          id: doc.id,
          title: data.title,
          author: data.author,
          authorId: data.authorId,
          authorImage: data.authorImage,
          date: data.date,
          category: (data.category as string || "Other/General"),
          tags: (data.tags || []) as string[],
          replies: data.replies || 0,
          views: data.views || 0,
          likes: data.likes || 0,
          solved: data.solved || false,
          createdAt: data.createdAt,
          lastActivityAt: data.lastActivityAt || data.createdAt,
          description: data.description || undefined,
          lastReplyText: data.lastReplyText || undefined,
          lastReplyAuthor: data.lastReplyAuthor || undefined,
        };
        newForums.push(forumItem);
      });

      setForums((prevForums) => (append ? [...prevForums, ...newForums] : newForums));
      setLastVisible(querySnapshot.docs[querySnapshot.docs.length - 1] || null);
      setHasMore(newForums.length === ITEMS_PER_PAGE);

    } catch (err: any) {
      console.error("Error fetching forums:", err);
      setError(`Failed to load forums: ${err.message || "Unknown error."}`);
    } finally {
      setLoading(false);
    }
  }, []);

  // Function to fetch replies for a specific forum
  const fetchReplies = useCallback(async (forumId: string) => {
    try {
      const q = query(
        collection(db, `forums/${forumId}/replies`),
        orderBy("createdAt", "asc")
      );
      const querySnapshot = await getDocs(q);
      let repliesList: Reply[] = await Promise.all(
        querySnapshot.docs.map(async (docSnap) => {
          const data = docSnap.data();
          let userVote: 'up' | 'down' | null = null;
          if (user?.uid) {
            const voteDocRef = doc(db, `forums/${forumId}/replies/${docSnap.id}/votes`, user.uid);
            const voteDocSnap = await getDoc(voteDocRef);
            if (voteDocSnap.exists()) {
              userVote = voteDocSnap.data().type;
            }
          }
          const isExpert = data.isExpert === true;
          return {
            id: docSnap.id,
            forumId: forumId,
            authorId: data.authorId,
            authorName: data.authorName,
            authorImage: data.authorImage,
            text: data.text,
            createdAt: data.createdAt,
            upvotes: data.upvotes || 0,
            downvotes: data.downvotes || 0,
            userVote,
            isExpert,
          };
        })
      );

      repliesList.sort((a, b) => {
        if (a.isExpert && !b.isExpert) return -1;
        if (!a.isExpert && b.isExpert) return 1;
        return a.createdAt.toMillis() - b.createdAt.toMillis();
      });

      setForumReplies(repliesList);
    } catch (err) {
      console.error("Error fetching replies:", err);
    }
  }, [user?.uid]);

  // Function to check if the current user has liked the selected forum
  const checkUserLikeStatus = useCallback(async (forumId: string, userId: string) => {
    if (!userId || !forumId) {
      setIsForumLikedByUser(false);
      return;
    }
    try {
      const likeDocRef = doc(db, `forums/${forumId}/likes`, userId);
      const likeDocSnap = await getDoc(likeDocRef);
      setIsForumLikedByUser(likeDocSnap.exists());
    } catch (err) {
      console.error("Error checking like status:", err);
      setIsForumLikedByUser(false);
    }
  }, []);

  // Handle opening the forum detail modal
  const handleOpenForumDetail = async (forum: Forum) => {
    setSelectedForum(forum);
    setIsForumDetailModalOpen(true);

    // Increment view count in Firestore
    try {
      const forumRef = doc(db, "forums", forum.id);
      await updateDoc(forumRef, {
        views: increment(1)
      });
      setForums(prevForums =>
        prevForums.map(f =>
          f.id === forum.id ? { ...f, views: f.views + 1 } : f
        )
      );
      setSelectedForum(prev => prev ? { ...prev, views: prev.views + 1 } : null);
    } catch (err) {
      console.error("Error incrementing view count:", err);
    }

    if (user?.uid) {
      checkUserLikeStatus(forum.id, user.uid);
    }
  };

  // Handle closing the forum detail modal
  const handleCloseForumDetail = () => {
    setIsForumDetailModalOpen(false);
    setSelectedForum(null);
    setForumReplies([]);
    setNewReplyText("");
    setIsForumLikedByUser(false);
    setIsReportContentModalOpen(false); // Ensure report modal is closed
    setReportReason("");
    setReportItemDetails(null);
    // Reset reported status for this modal session
    setReportedForumIdInModal(null);
    setReportedReplyIdsInModal(new Set());
  };

  // Handle adding a new reply
  const handleAddReply = async () => {
    if (!user?.uid || !userData || !selectedForum || !newReplyText.trim()) {
      console.warn("Cannot add reply: User not logged in, no forum selected, or reply text is empty.");
      alert("Please log in to add a reply and ensure your profile is complete."); // Inform user
      return;
    }

    setSubmittingReply(true);
    try {
      const initials = (userData.firstName?.[0] || 'U') + (userData.lastName?.[0] || 'S');
      const authorImagePlaceholder = `https://placehold.co/40x40/aabbcc/ffffff?text=${initials}`;
      const authorName = userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}` : userData.email || 'Anonymous User';

      const replyData: Omit<Reply, 'id'> = {
        forumId: selectedForum.id,
        authorId: user.uid,
        authorName: authorName,
        authorImage: authorImagePlaceholder,
        text: newReplyText.trim(),
        createdAt: Timestamp.now(),
        upvotes: 0,
        downvotes: 0,
        isExpert: currentUserIsExpert // Set if the replying user is an expert
      };

      await addDoc(collection(db, `forums/${selectedForum.id}/replies`), replyData);

      const forumRef = doc(db, "forums", selectedForum.id);
      const now = Timestamp.now();
      await updateDoc(forumRef, {
        replies: increment(1),
        lastActivityAt: now,
        lastReplyText: newReplyText.trim(),
        lastReplyAuthor: authorName,
      });

      setNewReplyText("");
      setSelectedForum(prev => prev ? { ...prev, replies: prev.replies + 1, lastActivityAt: now, lastReplyText: newReplyText.trim(), lastReplyAuthor: authorName } : null);
      setForums(prevForums => prevForums.map(f =>
        f.id === selectedForum.id ? { ...f, replies: f.replies + 1, lastActivityAt: now, lastReplyText: newReplyText.trim(), lastReplyAuthor: authorName } : f
      ));

      await fetchReplies(selectedForum.id);
      console.log("Reply added successfully!");
    } catch (err) {
      console.error("Error adding reply:", err);
      alert("Failed to add reply. Please try again.");
    } finally {
      setSubmittingReply(false);
    }
  };

  // Handle liking/unliking a forum
  const handleLikeUnlike = async () => {
    if (!user?.uid || !selectedForum) {
      console.warn("Cannot like/unlike: User not logged in or no forum selected.");
      alert("Please log in to like a post.");
      return;
    }

    try {
      const likeDocRef = doc(db, `forums/${selectedForum.id}/likes`, user.uid);
      const forumRef = doc(db, "forums", selectedForum.id);

      if (isForumLikedByUser) {
        await deleteDoc(likeDocRef);
        await updateDoc(forumRef, { likes: increment(-1) });
        setIsForumLikedByUser(false);
        setSelectedForum(prev => prev ? { ...prev, likes: prev.likes - 1 } : null);
      } else {
        await setDoc(likeDocRef, { userId: user.uid, likedAt: Timestamp.now() });
        await updateDoc(forumRef, { likes: increment(1) });
        setIsForumLikedByUser(true);
        setSelectedForum(prev => prev ? { ...prev, likes: prev.likes + 1 } : null);
      }
      setForums(prevForums =>
        prevForums.map(f =>
          f.id === selectedForum.id
            ? { ...f, likes: isForumLikedByUser ? f.likes - 1 : f.likes + 1 }
            : f
        )
      );
    } catch (err) {
      console.error("Error liking/unliking forum:", err);
      alert("Failed to like/unlike post. Please try again.");
    }
  };

  // Handle upvote/downvote for a reply
  const handleReplyVote = async (replyId: string, currentVoteType: 'up' | 'down' | null, newVoteType: 'up' | 'down' | null) => {
    if (!user?.uid || !selectedForum) {
      console.warn("Cannot vote on reply: User not logged in or no forum selected.");
      alert("Please log in to vote on replies.");
      return;
    }

    const replyRef = doc(db, `forums/${selectedForum.id}/replies`, replyId);
    const voteRef = doc(db, `forums/${selectedForum.id}/replies/${replyId}/votes`, user.uid);

    try {
      setForumReplies(prevReplies =>
        prevReplies.map(reply => {
          if (reply.id === replyId) {
            let updatedUpvotes = reply.upvotes;
            let updatedDownvotes = reply.downvotes;

            if (newVoteType === 'up') {
              if (currentVoteType === 'up') {
                updatedUpvotes--;
                newVoteType = null;
              } else {
                updatedUpvotes++;
                if (currentVoteType === 'down') updatedDownvotes--;
              }
            } else if (newVoteType === 'down') {
              if (currentVoteType === 'down') {
                updatedDownvotes--;
                newVoteType = null;
              } else {
                updatedDownvotes++;
                if (currentVoteType === 'up') updatedUpvotes--;
              }
            }
            return { ...reply, upvotes: updatedUpvotes, downvotes: updatedDownvotes, userVote: newVoteType };
          }
          return reply;
        })
      );

      const updatePayload: { [key: string]: any } = {};
      if (newVoteType === 'up') {
        if (currentVoteType === 'up') {
          await deleteDoc(voteRef);
          updatePayload.upvotes = increment(-1);
        } else {
          await setDoc(voteRef, { type: 'up', userId: user.uid, votedAt: Timestamp.now() });
          updatePayload.upvotes = increment(1);
          if (currentVoteType === 'down') { updatePayload.downvotes = increment(-1); }
        }
      } else if (newVoteType === 'down') {
        if (currentVoteType === 'down') {
          await deleteDoc(voteRef);
          updatePayload.downvotes = increment(-1);
        } else {
          await setDoc(voteRef, { type: 'down', userId: user.uid, votedAt: Timestamp.now() });
          updatePayload.downvotes = increment(1);
          if (currentVoteType === 'up') { updatePayload.upvotes = increment(-1); }
        }
      } else {
        await deleteDoc(voteRef);
        if (currentVoteType === 'up') { updatePayload.upvotes = increment(-1); }
        else if (currentVoteType === 'down') { updatePayload.downvotes = increment(-1); }
      }

      await updateDoc(replyRef, updatePayload);
      console.log(`Reply ${replyId} voted: ${newVoteType}`);

    } catch (err) {
      console.error("Error voting on reply:", err);
      alert("Failed to vote. Please try again.");
    }
  };

  // Handles creation of a new discussion
  const handleCreateNewDiscussion = async () => {
    if (!user?.uid || !userData || !newDiscussionTitle.trim() || !newDiscussionDescription.trim() || !newDiscussionCategory) {
      console.warn("Cannot create new discussion: User not logged in, or required fields are empty.");
      alert("Please log in and fill all required fields to create a new discussion.");
      return;
    }

    setSubmittingNewDiscussion(true);
    try {
      const initials = (userData.firstName?.[0] || 'U') + (userData.lastName?.[0] || 'S');
      const authorImagePlaceholder = `https://placehold.co/40x40/aabbcc/ffffff?text=${initials}`;
      const authorName = userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}` : userData.email || 'Anonymous User';

      const now = Timestamp.now();
      const newForumData: Omit<Forum, 'id'> = {
        title: newDiscussionTitle.trim(),
        author: authorName,
        authorId: user.uid,
        authorImage: authorImagePlaceholder,
        date: now,
        category: newDiscussionCategory,
        tags: newDiscussionTags.split(',').map(tag => tag.trim()).filter(tag => tag),
        replies: 0,
        views: 0,
        likes: 0,
        solved: false,
        createdAt: now,
        lastActivityAt: now,
        description: newDiscussionDescription.trim(),
      };

      const docRef = await addDoc(collection(db, "forums"), newForumData);
      console.log("New discussion created with ID:", docRef.id);

      // Optimistically add the new forum to the beginning of the list and re-sort
      setForums(prevForums => {
        const updatedList = [{ ...newForumData, id: docRef.id }, ...prevForums];
        // Re-sort to maintain order by lastActivityAt for the displayed list
        return updatedList.sort((a, b) => b.lastActivityAt.toMillis() - a.lastActivityAt.toMillis());
      });


      setNewDiscussionTitle("");
      setNewDiscussionDescription("");
      setNewDiscussionCategory("Other/General");
      setNewDiscussionTags("");
      setIsNewDiscussionModalOpen(false);
      alert("Your discussion post has been created!");

    } catch (error) {
      console.error("Error creating new discussion:", error);
      alert("Failed to create new discussion. Please try again.");
    } finally {
      setSubmittingNewDiscussion(false);
    }
  };

  // Function to open the New Discussion modal
  const handleOpenNewDiscussionModal = () => {
    if (user) {
      setIsNewDiscussionModalOpen(true);
    } else {
      alert("Please log in to create a new discussion.");
    }
  };

  // --- REPORTING FUNCTIONALITY ---
  const handleReportContent = (itemId: string, itemTitle: string, type: 'forum' | 'reply') => {
    if (!user) {
      alert("Please log in to report content.");
      return;
    }
    setReportItemDetails({ id: itemId, title: itemTitle, type });
    setIsReportContentModalOpen(true);
  };

  const submitReport = async () => {
    if (!user?.uid || !userData || !reportItemDetails || !reportReason.trim()) {
      console.warn("Cannot submit report: Missing user, item details, or reason.");
      alert("Please provide a reason for the report.");
      return;
    }

    setSubmittingReport(true);
    try {
      const reportData: Omit<ReportedPost, 'id'> = {
        type: reportItemDetails.type,
        itemId: reportItemDetails.id,
        itemTitle: reportItemDetails.title,
        reporterId: user.uid,
        reporterName: userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}` : userData.email || 'Anonymous User',
        reason: reportReason.trim(),
        reportedAt: Timestamp.now(),
        status: 'pending', // Always pending initially
      };

      await addDoc(collection(db, "reportedPosts"), reportData);
      console.log("Content reported successfully:", reportData);

      // Update the local state to show "Post Reported" for the current item
      if (reportItemDetails.type === 'forum') {
          setReportedForumIdInModal(reportItemDetails.id);
      } else if (reportItemDetails.type === 'reply') {
          setReportedReplyIdsInModal(prev => new Set(prev).add(reportItemDetails.id));
      }

      setReportReason("");
      setReportItemDetails(null);
      setIsReportContentModalOpen(false);
      alert("Content has been reported successfully. Thank you for your feedback!");
    } catch (err) {
      console.error("Error submitting report:", err);
      alert("Failed to submit report. Please try again.");
    } finally {
      setSubmittingReport(false);
    }
  };


  useEffect(() => {
    setForums([]); // Clear forums on tab change
    setLastVisible(null);
    setHasMore(true);
    fetchForums(activeTab, null, false);
  }, [activeTab, fetchForums]);

  // Fetch categories on component mount
  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);


  useEffect(() => {
    if (selectedForum) {
      fetchReplies(selectedForum.id);
      if (user?.uid) {
        checkUserLikeStatus(selectedForum.id, user.uid);
      } else {
        setIsForumLikedByUser(false);
      }
    }
  }, [selectedForum, user?.uid, fetchReplies, checkUserLikeStatus]);


  const handleLoadMore = () => {
    if (hasMore && !loading) {
      fetchForums(activeTab, lastVisible, true);
    }
  };

  const handleTabChange = (value: string) => {
    setActiveTab(value);
  };

  if (authLoading || loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <p className="ml-2 text-lg">Loading forums...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container py-8 px-4 text-center text-red-500">
        <p>{error}</p>
        <Button onClick={() => fetchForums(activeTab, null, false)} className="mt-4">
          Try Again
        </Button>
      </div>
    );
  }

  // Combine hardcoded and fetched categories for tabs, ensuring uniqueness and 'all' first
  const allAvailableCategories = ["all", ...initialCategories, ...categories.map(c => c.name)]
    .filter((value, index, self) => self.indexOf(value) === index)
    .sort((a, b) => {
      if (a === "all") return -1;
      if (b === "all") return 1;
      return a.localeCompare(b);
    });

  return (
    <div className="container py-8 px-4">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold mb-2">Student Forums</h1>
          <p className="text-muted-foreground">Ask questions, share insights, and learn from peers and experts</p>
        </div>
        <div className="flex gap-2">
          {user ? ( // Only show "New Discussion" button if user is logged in
            <Button onClick={handleOpenNewDiscussionModal}>
              <MessageSquare className="mr-2 h-4 w-4" />
              New Discussion
            </Button>
          ) : ( // Show disabled button if not logged in
            <Button disabled className="cursor-not-allowed opacity-70">
              <MessageSquare className="mr-2 h-4 w-4" />
              New Discussion (Login to post)
            </Button>
          )}
        </div>
      </div>

      <Tabs defaultValue="all" value={activeTab} onValueChange={handleTabChange} className="mb-8">
        <TabsList className="grid grid-cols-4 md:grid-cols-7 mb-8">
          {allAvailableCategories.map(cat => (
            <TabsTrigger key={cat} value={cat}>
              {cat === "Other/General" ? "Other" : cat.split('/')[0]}
            </TabsTrigger>
          ))}
        </TabsList>

        <TabsContent value={activeTab} className="mt-0">
          {!loading && !error && forums.length === 0 ? (
            <div className="text-center text-muted-foreground py-10">
              <p>No forums found for this category.</p>
            </div>
          ) : (
            <div className="grid gap-4">
              {forums.map((forum) => (
                <Card key={forum.id} className="hover:shadow-md transition-shadow cursor-pointer" onClick={() => handleOpenForumDetail(forum)}>
                  <CardHeader className="pb-2">
                    <div className="flex justify-between">
                      <div className="flex items-start gap-4">
                        <Image
                          src={forum.authorImage || "/placeholder.svg"}
                          alt={forum.author}
                          width={40}
                          height={40}
                          className="rounded-full"
                        />
                        <div>
                          <CardTitle className="text-lg">
                            <Link href={`/forums/${forum.id}`} onClick={(e) => { e.preventDefault(); handleOpenForumDetail(forum); }} className="hover:text-primary transition-colors">
                              {forum.title}
                            </Link>
                          </CardTitle>
                          <CardDescription>
                            Posted by <span className="font-medium">{forum.author}</span> • {formatFirestoreTimestamp(forum.date)}
                          </CardDescription>
                        </div>
                      </div>
                      {forum.solved && (
                        <Badge className="ml-2 bg-green-500 text-white">
                          Solved
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="pb-2">
                    {forum.description && (
                      <p className="text-sm text-muted-foreground line-clamp-3 mb-3">
                        {forum.description}
                      </p>
                    )}
                    <div className="flex flex-wrap gap-2">
                      {forum.tags.map((tag, i) => (
                        <Badge key={i} variant="outline">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                    {forum.lastReplyText && forum.lastReplyAuthor && forum.replies > 0 && (
                      <div className="mt-4 pt-3 border-t border-gray-200 dark:border-gray-700 text-sm">
                        <p className="font-semibold text-muted-foreground">Latest reply by {forum.lastReplyAuthor}:</p>
                        <p className="text-gray-700 dark:text-gray-300 line-clamp-2">{forum.lastReplyText}</p>
                      </div>
                    )}
                  </CardContent>
                  <CardFooter className="flex justify-between text-sm text-muted-foreground">
                    <div className="flex gap-4">
                      <span className="flex items-center">
                        <MessageSquare className="mr-1 h-4 w-4" />
                        {forum.replies} replies
                      </span>
                      <span className="flex items-center">
                        <Eye className="mr-1 h-4 w-4" />
                        {forum.views} views
                      </span>
                      <span className="flex items-center">
                        <ThumbsUp className="mr-1 h-4 w-4" />
                        {forum.likes} likes
                      </span>
                    </div>
                    <span className="flex items-center">
                      <Clock className="mr-1 h-4 w-4" />
                      Last activity: {formatFirestoreTimestamp(forum.lastActivityAt)}
                    </span>
                  </CardFooter>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>

      {hasMore && (
        <div className="flex justify-center mt-8">
          <Button onClick={handleLoadMore} disabled={loading} variant="outline">
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Loading More...
              </>
            ) : (
              "Load More"
            )}
          </Button>
        </div>
      )}

      {/* Forum Detail Modal */}
      <Dialog open={isForumDetailModalOpen} onOpenChange={handleCloseForumDetail}>
        <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto">
          {selectedForum && (
            <>
              <DialogHeader>
                <DialogTitle className="text-2xl font-bold flex items-center">
                  {selectedForum.title}
                  {selectedForum.solved && (
                    <Badge className="ml-3 bg-green-500 text-white text-base">Solved</Badge>
                  )}
                </DialogTitle>
                <DialogDescription>
                  Posted by <span className="font-semibold">{selectedForum.author}</span> •{" "}
                  {formatFirestoreTimestamp(selectedForum.date)}
                </DialogDescription>
              </DialogHeader>

              {/* Forum Details: Display description */}
              {selectedForum.description && (
                <div className="my-4">
                  <p className="text-base text-gray-800 dark:text-gray-200">
                    {selectedForum.description}
                  </p>
                </div>
              )}

              <div className="flex flex-wrap gap-2 mt-3">
                {selectedForum.tags.map((tag, i) => (
                  <Badge key={i} variant="secondary">
                    {tag}
                  </Badge>
                ))}
              </div>
              <div className="flex items-center gap-4 text-sm text-muted-foreground mt-4">
                <span className="flex items-center">
                  <MessageSquare className="mr-1 h-4 w-4" />
                  {selectedForum.replies}
                </span>
                <span className="flex items-center">
                  <Eye className="mr-1 h-4 w-4" />
                  {selectedForum.views}
                </span>
                <span className="flex items-center gap-1">
                  <Heart className={cn("h-4 w-4 transition-colors", isForumLikedByUser ? "text-red-500 fill-red-500" : "text-gray-500")} />
                  {selectedForum.likes}
                </span>

                {user && ( // Only show like button if user is logged in
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleLikeUnlike}
                    disabled={submittingReply}
                    className={cn(
                      "ml-auto rounded-md px-3 py-1 text-sm flex items-center transition-all duration-200",
                      isForumLikedByUser ? "bg-red-500 text-white hover:bg-red-600" : "bg-transparent text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
                    )}
                  >
                    <Heart
                      className={cn(
                        "mr-1 h-4 w-4 transition-colors",
                        isForumLikedByUser ? "fill-white" : "text-gray-500 dark:text-gray-300"
                      )}
                    />
                    {isForumLikedByUser ? "Liked" : "Like"}
                  </Button>
                )}
              </div>

              {/* Report Post Button (for main forum post) */}
              {user && (
                  <div className="flex justify-end mt-4">
                      <Button
                          variant="outline"
                          onClick={() => handleReportContent(selectedForum.id, selectedForum.title, 'forum')}
                          className={cn(
                            "text-red-500 border-red-500",
                            reportedForumIdInModal === selectedForum.id ? "bg-green-100 text-green-700 border-green-700" : "hover:text-red-600 hover:border-red-600"
                          )}
                          disabled={reportedForumIdInModal === selectedForum.id || submittingReport}
                      >
                          {reportedForumIdInModal === selectedForum.id ? (
                              <>
                                  <Flag className="mr-2 h-4 w-4" /> Post Reported
                              </>
                          ) : (
                              <>
                                  <Flag className="mr-2 h-4 w-4" /> Report Post
                              </>
                          )}
                      </Button>
                  </div>
              )}

              {/* Replies Section */}
              <h3 className="text-xl font-semibold mb-3 mt-6">Replies ({forumReplies.length})</h3>
              <div className="space-y-4 max-h-[300px] overflow-y-auto pr-2">
                {forumReplies.length === 0 ? (
                  <p className="text-muted-foreground text-sm">No replies, start the conversation!</p>
                ) : (
                  forumReplies.map((reply) => (
                    <div key={reply.id!} className={cn(
                      "flex items-start gap-3 p-3 rounded-lg",
                      reply.isExpert
                        ? "bg-yellow-50 dark:bg-yellow-950 border-l-4 border-yellow-500 shadow-md transition-all duration-300"
                        : "bg-gray-50 dark:bg-gray-800"
                    )}>
                      <Avatar className="h-8 w-8">
                        {reply.authorImage && reply.authorImage !== "/placeholder.svg" ? (
                          <Image
                            src={reply.authorImage}
                            alt={reply.authorName}
                            width={32}
                            height={32}
                            className="rounded-full"
                          />
                        ) : (
                          <AvatarFallback>
                            {reply.authorName ? reply.authorName.split(' ').map(n => n[0]).join('').toUpperCase() : <UserIcon className="h-4 w-4" />}
                          </AvatarFallback>
                        )}
                      </Avatar>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 text-sm">
                          <span className="font-semibold">{reply.authorName}</span>
                          {reply.isExpert && (
                            <Badge variant="outline" className="bg-yellow-200 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-200">
                              <Award className="h-3 w-3 mr-1" /> Expert Reply
                            </Badge>
                          )}
                          <span className="text-muted-foreground">• {formatFirestoreTimestamp(reply.createdAt)}</span>
                        </div>
                        <p className="text-sm mt-1">{reply.text}</p>
                        {user && (
                          <div className="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-6 w-6 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
                              onClick={() => handleReplyVote(reply.id!, reply.userVote || null, reply.userVote === 'up' ? null : 'up')}
                            >
                              <ThumbsUp
                                className={cn(
                                  "h-4 w-4 transition-colors",
                                  reply.userVote === 'up' ? "text-blue-500 fill-blue-500" : "text-gray-500 hover:text-blue-400"
                                )}
                              />
                            </Button>
                            <span>{reply.upvotes}</span>

                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-6 w-6 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 ml-2"
                              onClick={() => handleReplyVote(reply.id!, reply.userVote || null, reply.userVote === 'down' ? null : 'down')}
                            >
                              <ThumbsDown
                                className={cn(
                                  "h-4 w-4 transition-colors",
                                  reply.userVote === 'down' ? "text-red-500 fill-red-500" : "text-gray-500 hover:text-red-400"
                                )}
                              />
                            </Button>
                            <span>{reply.downvotes}</span>
                            {/* Report Reply Button */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="h-6 w-6 rounded-full ml-auto"
                                onClick={(e) => {
                                    e.stopPropagation(); // Prevent closing main modal
                                    handleReportContent(reply.id!, reply.text.substring(0, 50) + "...", 'reply');
                                }}
                                disabled={reportedReplyIdsInModal.has(reply.id!) || submittingReport}
                            >
                                <Flag className={cn(
                                    "h-4 w-4 transition-colors",
                                    reportedReplyIdsInModal.has(reply.id!) ? "text-green-500 fill-green-500" : "text-red-400 hover:text-red-600"
                                )} />
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  ))
                )}
              </div>

              {/* Add Reply Input */}
              {user ? (
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <Label htmlFor="new-reply" className="mb-2 block font-semibold">Add your reply</Label>
                  <Textarea
                    id="new-reply"
                    placeholder="Type your reply here..."
                    value={newReplyText}
                    onChange={(e) => setNewReplyText(e.target.value)}
                    rows={3}
                    className="w-full mb-3"
                    disabled={submittingReply}
                  />
                  <Button onClick={handleAddReply} disabled={submittingReply || !newReplyText.trim()}>
                    {submittingReply ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Submitting...
                      </>
                    ) : (
                      "Submit Reply"
                    )}
                  </Button>
                </div>
              ) : (
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700 text-center text-muted-foreground">
                  <p>Please log in to add a reply or like this post.</p>
                  <Link href="/login" passHref>
                    <Button variant="link" className="mt-2">Log In</Button>
                  </Link>
                </div>
              )}
            </>
          )}
        </DialogContent>
      </Dialog>

      {/* New Discussion Modal */}
      <Dialog open={isNewDiscussionModalOpen} onOpenChange={setIsNewDiscussionModalOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold">Start a New Discussion</DialogTitle>
            <DialogDescription>
              Create a new forum post to ask a question or share insights.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="new-title" className="text-right">
                Title
              </Label>
              <Input
                id="new-title"
                value={newDiscussionTitle}
                onChange={(e) => setNewDiscussionTitle(e.target.value)}
                className="col-span-3"
                placeholder="E.g., How to ace Infosys SQL interview?"
                disabled={submittingNewDiscussion}
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="new-category" className="text-right">
                Category
              </Label>
              <Select
                value={newDiscussionCategory}
                onValueChange={setNewDiscussionCategory}
                disabled={submittingNewDiscussion}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select a category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((category) => ( // Use dynamically fetched categories
                    <SelectItem key={category.id} value={category.name}>
                      {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="new-tags" className="text-right">
                Tags
              </Label>
              <Input
                id="new-tags"
                value={newDiscussionTags}
                onChange={(e) => setNewDiscussionTags(e.target.value)}
                className="col-span-3"
                placeholder="Comma-separated (e.g., Python, DSA, Interview)"
                disabled={submittingNewDiscussion}
              />
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="new-description" className="text-right">
                Description
              </Label>
              <Textarea
                id="new-description"
                value={newDiscussionDescription}
                onChange={(e) => setNewDiscussionDescription(e.target.value)}
                className="col-span-3"
                rows={5}
                placeholder="Write your detailed question or discussion here..."
                disabled={submittingNewDiscussion}
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsNewDiscussionModalOpen(false)} disabled={submittingNewDiscussion}>
              Cancel
            </Button>
            <Button onClick={handleCreateNewDiscussion} disabled={submittingNewDiscussion || !newDiscussionTitle.trim() || !newDiscussionDescription.trim()}>
              {submittingNewDiscussion ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Creating...
                </>
              ) : (
                "Create Post"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Report Forum/Content Modal */}
      <Dialog open={isReportContentModalOpen} onOpenChange={setIsReportContentModalOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Report Content</DialogTitle>
            <DialogDescription>
              Please provide a reason for reporting this content.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            {reportItemDetails && (
              <p className="text-sm text-muted-foreground">
                Reporting: <span className="font-semibold">{reportItemDetails.type.toUpperCase()}</span> "{reportItemDetails.title}"
              </p>
            )}
            <Label htmlFor="report-reason">Reason</Label>
            <Textarea
              id="report-reason"
              placeholder="e.g., Spam, Inappropriate content, Misinformation"
              value={reportReason}
              onChange={(e) => setReportReason(e.target.value)}
              rows={4}
              disabled={submittingReport}
            />
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsReportContentModalOpen(false)} disabled={submittingReport}>
              Cancel
            </Button>
            <Button onClick={submitReport} disabled={submittingReport || !reportReason.trim()}>
              {submittingReport ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Submitting...
                </>
              ) : (
                "Submit Report"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
